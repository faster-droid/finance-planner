name: CI/CD Pipeline

on:
  push:
    branches:
      - master
      - develop
      - feature/*
      - release/*
      - hotfix/*

  pull_request:
    branches:
      - master
    types: [closed]

permissions:
  contents: write
  packages: write  # Для публикации в GHCR нужны дополнительные права

jobs:
  build_and_publish:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Клонирование кода из репозитория
      - name: Checkout code
        uses: actions/checkout@v3

      # Шаг 2: Установка JDK 11 для сборки Java-приложения
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # Шаг 3: Сборка приложения Maven
      - name: Build with Maven
        run: mvn clean package

      # Шаг 4: Логин в GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Шаг 5: Сборка Docker-образа
      - name: Build Docker image
        run: docker build -t ghcr.io/${{ github.repository_owner }}/finance-planner:${{ github.run_number }} .

      # Шаг 6: Публикация Docker-образа в GHCR
      - name: Push Docker image to GHCR
        run: docker push ghcr.io/${{ github.repository_owner }}/finance-planner:${{ github.run_number }}

      # Шаг 7: Обновление документации (например, с помощью Javadoc)
      - name: Generate Javadoc
        run: mvn javadoc:javadoc

      # Шаг 8: Определение и увеличение версии
      - name: Determine and Bump Version
        id: version
        run: |
          # Получаем последний тег
          LAST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "Last tag: $LAST_TAG"

          # Разбиваем тег на части
          IFS='.' read -r MAJOR MINOR PATCH <<< "${LAST_TAG#v}"

          # Увеличиваем версию в зависимости от типа изменений
          PATCH=$((PATCH + 1))  # Увеличиваем патч-версию по умолчанию

          # Создаем новый тег
          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "New tag: $NEW_TAG"

          # Проверяем, существует ли тег
          while git rev-parse "$NEW_TAG" >/dev/null 2>&1; do
            echo "Tag $NEW_TAG already exists. Incrementing the patch version."
            PATCH=$((PATCH + 1))
            NEW_TAG="v$MAJOR.$MINOR.$PATCH"
            echo "New tag after increment: $NEW_TAG"
          done

          # Устанавливаем выходное значение
          echo "new_tag=$NEW_TAG" >> $GITHUB_ENV

          # Создаем тег в git
          git tag $NEW_TAG
          git push origin $NEW_TAG

  deploy:
    needs: build_and_publish
    runs-on: ubuntu-latest

    steps:
      # Шаг 9: Деплой приложения на сервер через SSH
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: 82.146.40.100
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Логин в GitHub Container Registry
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            # Пулл последнего образа
            docker pull ghcr.io/${{ github.repository_owner }}/finance-planner:${{ github.run_number }}
            # Остановка и удаление старого контейнера, если он существует
            docker stop finance-planner || true
            docker rm finance-planner || true
            # Запуск нового контейнера
            docker run -d --name finance-planner -p 80:8080 -v finance-planner-db-data:/data ghcr.io/${{ github.repository_owner }}/finance-planner:${{ github.run_number }}