name: CI/CD Pipeline

on:
  push:
    branches:
      - master
      - develop
      - feature/*
      - release/*
      - hotfix/*

  pull_request:
    branches:
      - master
    types: [closed]

permissions:
  contents: write
  packages: write

jobs:
  build_and_publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Build with Maven
        run: mvn clean package

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: docker build -t ghcr.io/${{ github.repository_owner }}/finance-planner:${{ github.run_number }} .

      - name: Push Docker image to GHCR
        run: docker push ghcr.io/${{ github.repository_owner }}/finance-planner:${{ github.run_number }}

      # Шаг для определения и увеличения версии
      - name: Determine and Bump Version
        id: version
        run: |
          # Получаем последний тег
          LAST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "Last tag: $LAST_TAG"
    
          # Разбиваем тег на части
          IFS='.' read -r MAJOR MINOR PATCH <<< "${LAST_TAG#v}"
    
          # Увеличиваем версию в зависимости от типа изменений
          # Здесь вы можете добавить логику для определения типа изменений
          # Например, если это мажорное изменение:
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
    
          # Создаем новый тег
          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "New tag: $NEW_TAG"
            
          # Устанавливаем выходное значение
          echo "new_tag=$NEW_TAG" >> $GITHUB_ENV

          # Создаем тег в git
          git tag $NEW_TAG
          git push origin $NEW_TAG

      # Шаг для создания релиза
      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.new_tag }}
          release_name: Release ${{ env.new_tag }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: build_and_publish
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: 82.146.40.100
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker pull ghcr.io/${{ github.repository_owner }}/finance-planner:${{ github.run_number }}
            docker stop finance-planner || true
            docker rm finance-planner || true
            docker run -d --name finance-planner -p 80:8080 -v finance-planner-db-data:/data ghcr.io/${{ github.repository_owner }}/finance-planner:${{ github.run_number }}